/*
Deployment script for TimeTraceTemp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TimeTrace"
:setvar DefaultFilePrefix "TimeTrace"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [Application]...';


GO
CREATE SCHEMA [Application]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Application].[Result.DCStatus]...';


GO
CREATE TABLE [Application].[Result.DCStatus] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Active]      BIT           NOT NULL,
    [DateCreated] DATETIME2 (7) NOT NULL,
    [Name]        VARCHAR (255) NOT NULL,
    [Description] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Result.DCStatus] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Application].[Result]...';


GO
CREATE TABLE [Application].[Result] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Active]      BIT           NOT NULL,
    [DateCreated] DATETIME2 (7) NOT NULL,
    [FirstName]   VARCHAR (255) NOT NULL,
    [LastName]    VARCHAR (255) NOT NULL,
    [RaceTime]    TIME (3)      NOT NULL,
    [StatusId]    INT           NOT NULL,
    CONSTRAINT [PK_Resutlt] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Application].[DF_Result.DCStatus_Active]...';


GO
ALTER TABLE [Application].[Result.DCStatus]
    ADD CONSTRAINT [DF_Result.DCStatus_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [Application].[DF_Result.DCStatus_DateCreated]...';


GO
ALTER TABLE [Application].[Result.DCStatus]
    ADD CONSTRAINT [DF_Result.DCStatus_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [Application].[DF_Result_Active]...';


GO
ALTER TABLE [Application].[Result]
    ADD CONSTRAINT [DF_Result_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [Application].[DF_Result_DateCreated]...';


GO
ALTER TABLE [Application].[Result]
    ADD CONSTRAINT [DF_Result_DateCreated] DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [Application].[DF_Result_StatusId]...';


GO
ALTER TABLE [Application].[Result]
    ADD CONSTRAINT [DF_Result_StatusId] DEFAULT ((1)) FOR [StatusId];


GO
PRINT N'Creating [Application].[FK_StatusId]...';


GO
ALTER TABLE [Application].[Result] WITH NOCHECK
    ADD CONSTRAINT [FK_StatusId] FOREIGN KEY ([StatusId]) REFERENCES [Application].[Result.DCStatus] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Application].[Result] WITH CHECK CHECK CONSTRAINT [FK_StatusId];


GO
PRINT N'Update complete.';

USE [$(DatabaseName)];
GO

SET NOCOUNT ON

SET IDENTITY_INSERT [Application].[Result.DCStatus] ON

MERGE INTO [Application].[Result.DCStatus] AS [Target]
USING (VALUES
  (1,1,'2020-12-08T20:24:03.3066667',N'Pending',N'Result is in pending status')
 ,(2,1,'2020-12-08T20:28:40.5133333',N'Approved',N'Result is approved')
 ,(3,1,'2020-12-08T20:29:15.4133333',N'Declined',N'Result is declined')
) AS [Source] ([Id],[Active],[DateCreated],[Name],[Description])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Active], [Target].[Active]) IS NOT NULL OR NULLIF([Target].[Active], [Source].[Active]) IS NOT NULL OR 
	NULLIF([Source].[DateCreated], [Target].[DateCreated]) IS NOT NULL OR NULLIF([Target].[DateCreated], [Source].[DateCreated]) IS NOT NULL OR 
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL OR 
	NULLIF([Source].[Description], [Target].[Description]) IS NOT NULL OR NULLIF([Target].[Description], [Source].[Description]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Active] = [Source].[Active], 
  [Target].[DateCreated] = [Source].[DateCreated], 
  [Target].[Name] = [Source].[Name], 
  [Target].[Description] = [Source].[Description]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Active],[DateCreated],[Name],[Description])
 VALUES([Source].[Id],[Source].[Active],[Source].[DateCreated],[Source].[Name],[Source].[Description])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [Application].[Result.DCStatus]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[Application].[Result.DCStatus] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [Application].[Result.DCStatus] OFF
SET NOCOUNT OFF
GO


GO
